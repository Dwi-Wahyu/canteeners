generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  name       String
  username   String    @unique
  password   String
  avatar     String?
  last_login DateTime?
  role       Role

  email        String?
  phone_number String?

  shop_owned Shop?

  orders Order[]

  messages Message[]

  quick_chats QuickChat[]

  conversations ConversationParticipant[]

  @@index([role])
  @@index([last_login])
  @@map("users")
}

enum Role {
  ADMIN
  CUSTOMER
  SHOP_OWNER
  COURIER
}

model Canteen {
  id        Int    @id @default(autoincrement())
  name      String
  image_url String
  shops     Shop[]

  @@map("canteens")
}

model Shop {
  id          String  @id @default(uuid())
  name        String
  description String?
  image_url   String
  canteen     Canteen @relation(fields: [canteen_id], references: [id])
  canteen_id  Int

  status           ShopStatus @default(ACTIVE)
  suspended_reason String?

  products Product[]
  orders   Order[]
  owner    User      @relation(fields: [owner_id], references: [id])
  owner_id String    @unique

  payments Payment[]

  @@index([canteen_id])
  @@index([name])
  @@map("shops")
}

enum ShopStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model Payment {
  id Int @id @default(autoincrement())

  method           PaymentMethod
  qr_url           String?
  account_number   String?
  note             String? // bisa berupa nama akun dan bank
  additional_price Float?

  shop    Shop   @relation(fields: [shop_id], references: [id])
  shop_id String

  @@map("payments")
}

enum PaymentMethod {
  QRIS
  BANK_TRANSFER
  CASH
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  image_url   String
  price       Float
  shop        Shop        @relation(fields: [shop_id], references: [id])
  shop_id     String
  order_items OrderItem[]

  @@index([name])
  @@index([shop_id])
  @@map("products")
}

model Conversation {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  participants ConversationParticipant[]

  messages Message[]

  @@map("conversations")
}

model ConversationParticipant {
  conversation    Conversation @relation(fields: [conversation_id], references: [id])
  conversation_id String
  user            User         @relation(fields: [user_id], references: [id])
  user_id         String

  @@id([conversation_id, user_id])
  @@index([user_id])
  @@map("conversation_participants")
}

model Message {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  sender     User     @relation(fields: [sender_id], references: [id])
  sender_id  String

  conversation    Conversation @relation(fields: [conversation_id], references: [id])
  conversation_id String

  content   String?
  image_url String?
  type      MessageType @default(TEXT)
  is_read   Boolean     @default(false)

  order    Order? @relation(fields: [order_id], references: [id])
  order_id Int?

  @@index([conversation_id])
  @@index([sender_id])
  @@map("messages")
}

enum MessageType {
  PAYMENT_PROOF
  SYSTEM
  ORDER
  TEXT
}

model Order {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  customer    User   @relation(fields: [customer_id], references: [id])
  customer_id String

  shop              Shop    @relation(fields: [shop_id], references: [id])
  shop_id           String
  estimation        Int? // dalam menit
  payment_proof_url String?

  total_price Float

  status OrderStatus

  message        Message[]
  payment_method PaymentMethod

  order_items OrderItem[]

  @@index([customer_id])
  @@index([shop_id])
  @@index([status])
  @@index([created_at])
  @@map("orders")
}

model OrderItem {
  id         Int     @id @default(autoincrement())
  order      Order   @relation(onDelete: Cascade, fields: [order_id], references: [id])
  order_id   Int
  product    Product @relation(fields: [product_id], references: [id])
  product_id Int
  quantity   Int
  price      Float
  note       String?

  @@index([order_id])
  @@map("order_items")
}

model QuickChat {
  id      Int     @id @default(autoincrement())
  message String
  user    User?   @relation(fields: [user_id], references: [id])
  user_id String?
}

enum OrderStatus {
  PENDING_CONFIRMATION // customer buat order, tunggu shop konfirmasi
  WAITING_PAYMENT // shop setuju, customer harus bayar
  WAITING_SHOP_CONFIRMATION // customer sudah upload bukti
  PROCESSING // shop terima pembayaran, pesanan diproses
  COMPLETED // order selesai
  REJECTED // ditolak karena stok tidak ada
  PAYMENT_REJECTED // bukti pembayaran tidak valid
}
