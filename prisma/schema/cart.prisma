model Cart {
  id         String    @id @default(uuid())
  user       User      @relation(fields: [user_id], references: [id])
  user_id    String    @unique
  status     CartStatus @default(ACTIVE)
  expires_at DateTime?

  shopCarts  ShopCart[]  

  @@index([user_id])
  @@index([status])
  @@map("carts")
}

enum CartStatus {
  ACTIVE // Sedang digunakan (default)
  CHECKED_OUT // Semua toko sudah dicheckout
  ABANDONED // Lama tidak dibuka (>1 jam)
  EXPIRED // Kadaluarsa (>7 hari)
  DELETED // Dihapus manual oleh user
}

model ShopCart {
  id         String @id @default(uuid())

  cart       Cart      @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  cart_id    String
  status     ShopCartStatus  @default(PENDING)
  shop       Shop      @relation(fields: [shop_id], references: [id])
  shop_id    String
  payment_method PaymentMethod @default(CASH)

  total_price   Float   @default(0)
  notes      String?   

  items      CartItem[]

  @@index([cart_id])
  @@index([shop_id])
  @@unique([cart_id, shop_id]) 
  @@map("shop_carts")
}

enum ShopCartStatus {
  PENDING // Masih di keranjang, bisa diedit
  ORDERED // Sudah jadi Order
  REMOVED // Dihapus dari keranjang (tapi bisa restore)
}

model CartItem {
  id            String  @id @default(uuid())
  shop_cart     ShopCart @relation(fields: [shop_cart_id], references: [id], onDelete: Cascade)
  shop_cart_id  String
  product       Product  @relation(fields: [product_id], references: [id])
  product_id    String

  quantity      Int
  price_at_add  Float
  notes         String?

  @@index([shop_cart_id])
  @@index([product_id])
  @@map("cart_items")
}