model Conversation {
    id         String   @id @default(uuid())
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    participants ConversationParticipant[]

    messages Message[]

    @@map("conversations")
}

model ConversationParticipant {
    conversation    Conversation @relation(fields: [conversation_id], references: [id])
    conversation_id String
    user            User         @relation(fields: [user_id], references: [id])
    user_id         String
    is_read         Boolean      @default(false)

    @@id([conversation_id, user_id])
    @@index([user_id])
    @@map("conversation_participants")
}

model Message {
    id         String   @id @default(uuid())
    created_at DateTime @default(now())
    sender     User     @relation(fields: [sender_id], references: [id])
    sender_id  String

    conversation    Conversation @relation(fields: [conversation_id], references: [id])
    conversation_id String

    content String?
    type    MessageType @default(TEXT)
    is_read Boolean     @default(false)

    order    Order?  @relation(fields: [order_id], references: [id])
    order_id String?

    media MessageMedia[]

    @@index([conversation_id])
    @@index([sender_id])
    @@map("messages")
}

enum MessageType {
    TEXT // Pesan teks biasa, bisa punya media
    SYSTEM // Pesan otomatis sistem
    ORDER // Pesan berkaitan dengan pesanan
    PAYMENT_PROOF // Pesan berisi bukti pembayaran (khusus)
}

model MessageMedia {
    id         String        @id @default(uuid())
    url        String
    mime_type  MediaMimeType
    message    Message       @relation(fields: [message_id], references: [id])
    message_id String

    @@index([message_id])
    @@map("message_media")
}

enum MediaMimeType {
    IMAGE
    VIDEO
}

model QuickChat {
    id      Int     @id @default(autoincrement())
    message String
    user    User?   @relation(fields: [user_id], references: [id])
    user_id String?

    @@map("quick_chats")
}
